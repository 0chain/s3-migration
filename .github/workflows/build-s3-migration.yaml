name: build-s3-migration

concurrency:
  group: "publish-${{ github.ref }}"
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - staging
    tags:
      - 'v*.*.*'
  pull_request:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build-linux
    runs-on: [self-hosted, arc-runner]
    steps:
      - name: Setup go 1.18
        uses: actions/setup-go@v2
        with:
          go-version: '1.18' # The Go version to download (if necessary) and use.

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Branch
        id: get_branch
        run: |
            BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
            echo ::set-output name=BRANCH::${BRANCH}
            echo $BRANCH

      - name: Set GITHUB_ENV
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
            echo "TAG=v0.0.0-master" >> $GITHUB_ENV
          elif  [[ "${{github.base_ref}}" == "dev" || "${{github.ref}}" == "refs/heads/dev" ]]; then
            echo "TAG=v0.0.0-dev" >> $GITHUB_ENV
          elif  [[ "${{github.base_ref}}" == "staging" || "${{github.ref}}" == "refs/heads/staging" ]]; then
            echo "TAG=v0.0.0-staging" >> $GITHUB_ENV
          else
            echo "TAG=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
          fi

      # - name: add dependencies
      #   run: |
      #     sudo apt update -y
      #     sudo apt -y install build-essential nghttp2 libnghttp2-dev libssl-dev wget unzip

      # - name: Install
      #   run: make build

      # - name: Zip release
      #   run: tar -czvf s3mgrt-linux.tar.gz ./s3mgrt

      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: s3mgrt-linux.tar.gz
      #     tag: ${{ env.TAG }}
      #     overwrite: true
      #     file_glob: true

      - name: Install AWS
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Set AWS credentials
        # if: steps.get_branch.outputs.BRANCH == s3binary
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          aws-region: us-east-2

      - name: Push to AWS S3
        # if: steps.get_branch.outputs.BRANCH == s3binary
        run: |
          pwd && ls
          mkdir $HOME/.aws
          touch $HOME/.aws/config
          touch $HOME/.aws/credentials

          echo '
          [default]
          region = us-east-2
          ' > $HOME/.aws/config

          echo '
          [default]
          aws_access_key_id = default_access_key
          aws_secret_access_key = default_secret_key
          ' > $HOME/.aws/credentials

          sed -i "s,default_access_key,${{ secrets.S3_ACCESS_KEY }},g" $HOME/.aws/credentials"
          sed -i "s,default_secret_key,${{ secrets.S3_SECRET_KEY }},g" $HOME/.aws/credentials"

          sudo aws configure list
          # sudo /usr/local/bin/aws s3 ls
          # sudo aws s3 cp s3mgrt-linux.tar.gz s3://${{ secrets.S3_MGRT_BUCKET }}/s3mgrt123test
          echo ${{ steps.get_branch.outputs.BRANCH }}

      # - name: 'Upload Artifact'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: s3mgrt-linux
      #     path: s3mgrt
      #     retention-days: 5

  build-windows:
    name: Build-windows
    runs-on: windows-latest
    steps:
      - name: Setup go 1.18
        uses: actions/setup-go@v2
        with:
          go-version: '1.18' # The Go version to download (if necessary) and use.

      # - name: Checkout
      #   uses: actions/checkout@v2

      # - name: Set GITHUB_ENV
      #   run: |
      #     IF ( "${{github.base_ref}}" -eq "master" -OR "${{github.ref}}" -eq "refs/heads/master" ){
      #       echo "TAG=v0.0.0-master" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      #     } ElseIf ( "${{github.base_ref}}" -eq "dev" -OR "${{github.ref}}" -eq "refs/heads/dev" ){
      #       echo "TAG=v0.0.0-dev" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      #     } ElseIf ( "${{github.base_ref}}" -eq "staging" -OR "${{github.ref}}" -eq "refs/heads/staging" ){
      #       echo "TAG=v0.0.0-staging" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      #     } ELSE {
      #       echo "TAG=${{github.ref}}" | %{$_ -replace('refs/tags/', '')} | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      #     }

      # - name: Install
      #   run: make build

      # - name: Zip Release
      #   run: |
      #     copy s3mgrt s3mgrt.exe
      #     7z a s3mgrt-windows.zip s3mgrt.exe
      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: s3mgrt-windows.zip
      #     tag: ${{ env.TAG }}
      #     overwrite: true
      #     file_glob: true

      # - name: 'Upload Artifact'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: s3mgrt-windows
      #     path: s3mgrt
      #     retention-days: 5

  build-macos:
    name: Build-macos
    runs-on: macos-runner-binary
    steps:
      - name: Setup go 1.18
        uses: actions/setup-go@v2
        with:
          go-version: '1.18' # The Go version to download (if necessary) and use.
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Set GITHUB_ENV
      #   run: |
      #     echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      #     if [[ "${{github.base_ref}}" == "master" || "${{github.ref}}" == "refs/heads/master" ]]; then
      #       echo "TAG=v0.0.0-master" >> $GITHUB_ENV
      #     elif  [[ "${{github.base_ref}}" == "dev" || "${{github.ref}}" == "refs/heads/dev" ]]; then
      #       echo "TAG=v0.0.0-dev" >> $GITHUB_ENV
      #     elif  [[ "${{github.base_ref}}" == "staging" || "${{github.ref}}" == "refs/heads/staging" ]]; then
      #       echo "TAG=v0.0.0-staging" >> $GITHUB_ENV
      #     else
      #       echo "TAG=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
      #     fi
      # - name: Install
      #   run: make build

      # - name: Zip release
      #   run: tar -czvf s3mgrt-macos.tar.gz ./s3mgrt

      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: s3mgrt-macos.tar.gz
      #     tag: ${{ env.TAG }}
      #     overwrite: true
      #     file_glob: true

      # - name: 'Upload Artifact'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: s3mgrt-macos
      #     path: s3mgrt
      #     retention-days: 5
