// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0chain/s3migration/dstorage (interfaces: DStoreI)

// Package mock_dstorage is a generated GoMock package.
package mock_dstorage

import (
	context "context"
	io "io"
	reflect "reflect"

	sdk "github.com/0chain/gosdk/zboxcore/sdk"
	gomock "github.com/golang/mock/gomock"
)

// MockDStoreI is a mock of DStoreI interface.
type MockDStoreI struct {
	ctrl     *gomock.Controller
	recorder *MockDStoreIMockRecorder
}

// MockDStoreIMockRecorder is the mock recorder for MockDStoreI.
type MockDStoreIMockRecorder struct {
	mock *MockDStoreI
}

// NewMockDStoreI creates a new mock instance.
func NewMockDStoreI(ctrl *gomock.Controller) *MockDStoreI {
	mock := &MockDStoreI{ctrl: ctrl}
	mock.recorder = &MockDStoreIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDStoreI) EXPECT() *MockDStoreIMockRecorder {
	return m.recorder
}

// Duplicate mocks base method.
func (m *MockDStoreI) Duplicate(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duplicate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}


// Duplicate indicates an expected call of Duplicate.
func (mr *MockDStoreIMockRecorder) Duplicate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockDStoreI)(nil).Duplicate), arg0, arg1, arg2, arg3, arg4)
}

// GetAvailableSpace mocks base method.
func (m *MockDStoreI) GetAvailableSpace() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSpace")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetAvailableSpace indicates an expected call of GetAvailableSpace.
func (mr *MockDStoreIMockRecorder) GetAvailableSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSpace", reflect.TypeOf((*MockDStoreI)(nil).GetAvailableSpace))
}

// GetFileMetaData mocks base method.
func (m *MockDStoreI) GetFileMetaData(arg0 context.Context, arg1 string) (*sdk.ORef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetaData", arg0, arg1)
	ret0, _ := ret[0].(*sdk.ORef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetaData indicates an expected call of GetFileMetaData.
func (mr *MockDStoreIMockRecorder) GetFileMetaData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetaData", reflect.TypeOf((*MockDStoreI)(nil).GetFileMetaData), arg0, arg1)
}

// GetTotalSpace mocks base method.
func (m *MockDStoreI) GetTotalSpace() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSpace")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTotalSpace indicates an expected call of GetTotalSpace.
func (mr *MockDStoreIMockRecorder) GetTotalSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSpace", reflect.TypeOf((*MockDStoreI)(nil).GetTotalSpace))
}

// IsFileExist mocks base method.
func (m *MockDStoreI) IsFileExist(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFileExist indicates an expected call of IsFileExist.
func (mr *MockDStoreIMockRecorder) IsFileExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileExist", reflect.TypeOf((*MockDStoreI)(nil).IsFileExist), arg0, arg1)
}

// Replace mocks base method.
func (m *MockDStoreI) Replace(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockDStoreIMockRecorder) Replace(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockDStoreI)(nil).Replace), arg0, arg1, arg2, arg3, arg4)
}

// UpdateAllocationDetails mocks base method.
func (m *MockDStoreI) UpdateAllocationDetails() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllocationDetails")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllocationDetails indicates an expected call of UpdateAllocationDetails.
func (mr *MockDStoreIMockRecorder) UpdateAllocationDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllocationDetails", reflect.TypeOf((*MockDStoreI)(nil).UpdateAllocationDetails))
}

// Upload mocks base method.
func (m *MockDStoreI) Upload(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 string, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockDStoreIMockRecorder) Upload(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockDStoreI)(nil).Upload), arg0, arg1, arg2, arg3, arg4, arg5)
}
